{"name":"ApiAi Slack Bot","tagline":"Slack API.AI Integration","body":"# Api.ai Slack Integration\r\n\r\n## Overview\r\n\r\nApi.ai Slack integration allows you to create Slack bots with natural language understanding based on Api.ai technology.\r\n\r\nSource code location: https://github.com/xVir/api-ai-slack-bot\r\n\r\nDocker image location: https://hub.docker.com/r/xvir/api-ai-slack-bot/\r\n\r\nTo launch a bot, you’ll need the Linux OS. To launch it in other operating systems, use [Docker Toolbox](https://www.docker.com/products/docker-toolbox).\r\n\r\nApi.ai documentation:\r\n\r\n- [How to create an Api.ai agent](https://docs.api.ai/docs/get-started#step-1-create-agent)\r\n- [How to obtain Api.ai authentication keys](https://docs.api.ai/docs/authentication)\r\n\r\nYou’ll need 3 keys:\r\n\r\n- client access token for Api.ai\r\n- subscription key for Api.ai\r\n- Slack bot API token\r\n\r\nTo obtain a Slack bot API token, create a new bot integration here: https://slack.com/apps/A0F7YS25R-bots.\r\n\r\n## Bot Launch\r\n\r\nTo launch the bot, use one of the following commands:\r\n\r\n**For background launch mode (-d parameter):**\r\n\r\n```sh\r\ndocker run -d --name slack_bot \\\r\n           -e accesskey=\"api.ai access key\" \\\r\n           -e subscriptionkey=\"api.ai subscription key\" \\\r\n           -e slackkey=\"slack bot key\" \\\r\n           xvir/api-ai-slack-bot\r\n```\r\n\r\n**For interactive launch mode (-it parameter):**\r\n\r\n```sh\r\ndocker run -it --name slack_bot \\\r\n           -e accesskey=\"api.ai access key\" \\\r\n           -e subscriptionkey=\"api.ai subscription key\" \\\r\n           -e slackkey=\"slack bot key\" \\\r\n           xvir/api-ai-slack-bot\r\n```\r\n\r\nTo stop the bot from running in the interactive mode, press CTRL+C.\r\n\r\nIn the background mode, you can control the bot’s state via simple commands:\r\n\r\n\r\n- `docker start slack_bot`\r\n- `docker stop slack_bot`,\r\n\r\nwhere `slack_bot` is the container name from the `run` command.\r\n\r\n## Custom Bot Launch\r\n\r\nIf you want to customize your bot behavior, follow the steps below.\r\n\r\n1. Clone the repository https://github.com/xVir/api-ai-slack-bot \r\n\r\n2. Change the code to `index.js`\r\n\r\n3. In the Docker, use the `run` command specifying the full path to the directory containing the `index.js` file:\r\n\r\n```sh\r\ndocker run -d --name slack_bot \\\r\n           -e accesskey=\"api.ai access key\" \\\r\n           -e subscriptionkey=\"api.ai subscription key\" \\\r\n           -e slackkey=\"slack bot key\" \\\r\n           -v /full/path/to/your/src:/usr/app/src \\\r\n           xvir/api-ai-slack-bot\r\n```\r\n\r\n## Code Notes\r\n\r\nBot implementation is based on the Slack Botkit: https://github.com/howdyai/botkit.\r\n\r\nMessage processing is done by the following code:\r\n\r\n```javascript\r\ncontroller.hears(['.*'],['direct_message','direct_mention','mention', 'ambient'], function(bot,message) {\r\n    console.log(message.text);\r\n    if (message.type == \"message\") {\r\n        if (message.user == bot.identity.id) {\r\n            // message from bot can be skipped\r\n        }\r\n        else {\r\n            var requestText = message.text;\r\n            var channel = message.channel;\r\n            if (!(channel in sessionIds)) {\r\n                sessionIds[channel] = uuid.v1();\r\n            }\r\n            var request = apiAiService.textRequest(requestText, { sessionId: sessionIds[channel] });\r\n            request.on('response', function (response) {\r\n                console.log(response);\r\n                if (response.result) {\r\n                    var responseText = response.result.fulfillment.speech;\r\n                    if (responseText) {\r\n                        bot.reply(message, responseText);\r\n                    }\r\n                }\r\n            });\r\n            request.on('error', function (error) {\r\n                console.log(error);\r\n            });\r\n            request.end();\r\n        }\r\n    }\r\n});\r\n```\r\n\r\nThis code extracts the text from each message:\r\n\r\n`var requestText = message.text;`\r\n\r\nAnd sends it to Api.ai:\r\n\r\n`var request = apiAiService.textRequest(requestText, { sessionId: sessionIds[channel] });`\r\n\r\nIf a non-empty response is received from Api.ai, the bot will respond with the received text:\r\n\r\n`bot.reply(message, responseText);`\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}